package com.unique.countsystem;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.unique.countsystem.record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RECORD.
*/
public class recordDao extends AbstractDao<record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, Integer.class, "date", false, "DATE");
        public final static Property AbsenceType = new Property(2, Integer.class, "absenceType", false, "ABSENCE_TYPE");
        public final static Property StudentId = new Property(3, int.class, "studentId", false, "STUDENT_ID");
    };

    private Query<record> student_AbsenceRecordsQuery;

    public recordDao(DaoConfig config) {
        super(config);
    }
    
    public recordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DATE' INTEGER," + // 1: date
                "'ABSENCE_TYPE' INTEGER," + // 2: absenceType
                "'STUDENT_ID' INTEGER NOT NULL );"); // 3: studentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, record entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date);
        }
 
        Integer absenceType = entity.getAbsenceType();
        if (absenceType != null) {
            stmt.bindLong(3, absenceType);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public record readEntity(Cursor cursor, int offset) {
        record entity = new record( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // absenceType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, record entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAbsenceType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(record entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(record entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "AbsenceRecords" to-many relationship of student. */
    public List<record> _queryStudent_AbsenceRecords(int studentId) {
        synchronized (this) {
            if (student_AbsenceRecordsQuery == null) {
                QueryBuilder<record> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StudentId.eq(null));
                student_AbsenceRecordsQuery = queryBuilder.build();
            }
        }
        Query<record> query = student_AbsenceRecordsQuery.forCurrentThread();
        query.setParameter(0, studentId);
        return query.list();
    }

}
